import{_ as p,c as h,a as l,b as i,e as a,d as t,w as e,r as k,o as d}from"./app-9OcoU4mE.js";const r={};function c(o,s){const n=k("RouteLink");return d(),h("div",null,[s[10]||(s[10]=l(`<h2 id="composition-api" tabindex="-1"><a class="header-anchor" href="#composition-api"><span>Composition API</span></a></h2><h3 id="setup-的基本用法" tabindex="-1"><a class="header-anchor" href="#setup-的基本用法"><span>setup() 的基本用法</span></a></h3><p>组件创建时初始化数据和逻辑，它会在组件实例创建之前调用，因此无法直接访问 this。</p><p>传参</p><ul><li>props：父组件传入的属性。</li><li>context：包含组件的上下文对象。包括emit等方法触发自定义事件</li></ul><p>可以在setup里定义生命周期钩子，从vue引入钩子函数，然后在setup里调用钩子函数定义声明周期逻辑。同时依然支持vue2版本的用法。</p><div class="language-javascript line-numbers-mode" data-ext="javascript" data-title="javascript"><button class="copy" title="Copy code" data-copied="Copied"></button><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">  //vue3版本</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">  import</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> {</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">onMounted</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">}</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;"> from</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;"> &#39;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">vue</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&#39;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">  export</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;"> default</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">    setup</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(){</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">      onMounted</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(()=&gt;{</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">        //Your code</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">      });</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">    }</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">    //...</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">  //vue2版本</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">  export</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;"> default</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">    setup</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(){}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">    mounted</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(){</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">      //Your code</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">    }</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">    //..</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">  }</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="响应式-api" tabindex="-1"><a class="header-anchor" href="#响应式-api"><span>响应式 API</span></a></h3><p>基于 Proxy 重构了 Vue 2 中的响应式（Vue 2 使用的是 Object.defineProperty）。</p><p>Vue 3 的响应式系统依赖于以下三个主要函数：</p><ul><li><p><strong>reactive</strong>：创建响应式对象。</p><ul><li>优点： 深度代理，嵌套对象中的属性也会变成响应式。</li><li>注意： reactive 返回的是一个 Proxy，而不是原始对象。</li></ul></li><li><p><strong>ref</strong>：创建响应式的基本数据类型（原始值，如数字、字符串、布尔值等）。</p><ul><li>value 属性： 当使用 ref 时，必须通过 .value 访问或修改其值。</li><li>与 DOM 绑定： Vue 模板中会自动解包 ref，不需要手动 .value。</li></ul></li><li><p><strong>computed</strong>: 创建基于其他响应式数据的动态计算值。</p><ul><li>缓存： 只有当依赖数据发生变化时，计算属性才会重新计算。</li><li>只读： 默认情况下，计算属性是只读的，但可以通过 set 定义可写计算属性。</li></ul><blockquote><p>[!NOTE]{#writable_computed} 可写计算属性，即computed方法定义时传入一个对象，对象里指定set和get方法。计算属性值被修改时会触发set方法，如果修改了get里依赖的变量，依赖了计算属性的地方会被更新</p></blockquote></li></ul><h3 id="computed-和-watch-的用法及实际应用场景" tabindex="-1"><a class="header-anchor" href="#computed-和-watch-的用法及实际应用场景"><span>computed 和 watch 的用法及实际应用场景</span></a></h3><p>computed 和 watch 是两个用于处理响应式数据的核心特性，它们都有各自的适用场景和用法。</p><ul><li>computed 的用法</li></ul><p>computed 属性用于定义依赖其他数据的计算属性，且具有缓存特性。只有当其依赖的响应式数据发生变化时，computed 属性才会重新计算。用于纯函数计算。</p><ul><li>watch 的用法</li></ul><p>watch 用于监听响应式数据的变化，并执行特定的逻辑。它适合处理异步操作、执行副作用或复杂的逻辑。</p><table><thead><tr><th>特性</th><th><code>computed</code></th><th><code>watch</code></th></tr></thead><tbody><tr><td>是否具备缓存</td><td>是，依赖数据未变时返回缓存值</td><td>否，每次触发都会执行回调</td></tr><tr><td>是否适合处理副作</td><td>否，适合用于纯函数计算</td><td>是，适合处理异步或副作用逻辑</td></tr><tr><td>适用场景</td><td>依赖数据的派生值，需要缓存结果</td><td>监听数据变化，执行副作用或复杂逻辑</td></tr></tbody></table><h3 id="provider-inject跨层级组件通信" tabindex="-1"><a class="header-anchor" href="#provider-inject跨层级组件通信"><span>Provider/Inject跨层级组件通信</span></a></h3><p id="provice-inject">provide 和 inject 是一对用于跨层级组件通信的功能。它们可以在祖先组件中提供数据（通过 provide），并在后代组件中获取数据（通过 inject），即使这些组件之间相隔多层级。</p><div class="language-javascript line-numbers-mode" data-ext="javascript" data-title="javascript"><button class="copy" title="Copy code" data-copied="Copied"></button><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">//祖先组件</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">export</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;"> default</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">  provide</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">()</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">    return</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#998418;--shiki-dark:#B8A965;">      sharedValue</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">:</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;"> &#39;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">Hello from ancestor!</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&#39;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">    };</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">  },</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">};</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">//后代组件</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">export</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;"> default</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#998418;--shiki-dark:#B8A965;">  inject</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">:</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> [</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&#39;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">sharedValue</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&#39;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">],</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">  mounted</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">()</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">    console</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">log</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;">this</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">sharedValue</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">);</span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"> // 输出: Hello from ancestor!</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">  },</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">};</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>provide 支持响应式数据。如果提供的值是一个响应式对象，后代组件会自动感知到变化。provide 和 inject 是一种轻量级的状态共享机制，非常适合处理特定上下文数据，而非作为全局状态管理工具的替代品。</p><h3 id="lifecycle-hooks" tabindex="-1"><a class="header-anchor" href="#lifecycle-hooks"><span>lifecycle hooks</span></a></h3>`,23)),i("p",null,[s[1]||(s[1]=a("详情")),t(n,{to:"/learn/vue/BAkBN/#lifecycle"},{default:e(()=>s[0]||(s[0]=[a("参考")])),_:1})]),s[11]||(s[11]=l(`<h3 id="script-setup-语法糖及其优势" tabindex="-1"><a class="header-anchor" href="#script-setup-语法糖及其优势"><span>script setup 语法糖及其优势</span></a></h3><p><code>&lt;script setup&gt;</code> 是一种语法糖，进一步简化了组件的书写方式，同时提升了性能。它结合了组合式 API和setup函数的功能，使代码更简洁、更直观。</p><ul><li><p><strong>更简洁的代码</strong></p></li><li><p><strong>性能更好</strong><br><code>&lt;script setup&gt;</code> 是在编译时进行解析的，而不是运行时。这意味着 Vue 能够更高效地优化组件的初始化和作用域管理。</p></li><li><p><strong>更清晰的作用域</strong><br> 变量和方法在<code>&lt;script setup&gt;</code>中默认是模板可见的，无需通过 return 暴露。</p></li><li><p><strong>更友好的类型推断支持（TS 集成）</strong><br> 在 <code>&lt;script setup&gt;</code> 中直接使用 TypeScript，无需额外配置。变量和 props 的类型会自动推断或定义，减少了类型定义的复杂性。</p></li><li><p><strong>支持多种新功能</strong></p><ol><li>顶层 defineProps 和 defineEmits： 用于定义组件的 props 和 emits，使语法更简单。</li></ol><div class="language-javascript line-numbers-mode" data-ext="javascript" data-title="javascript"><button class="copy" title="Copy code" data-copied="Copied"></button><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">&lt;</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">script</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> setup</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">defineProps(</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">{</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> name</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">: </span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">String</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> }</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">);</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">defineEmits([&#39;submit&#39;]);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">const handleClick = () =&gt; emit(&#39;submit&#39;);</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">&lt;/</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">script</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">&gt;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="2"><li>useSlots 和 useAttrs： 直接访问插槽和属性，无需通过 setup 参数。</li></ol><div class="language-javascript line-numbers-mode" data-ext="javascript" data-title="javascript"><button class="copy" title="Copy code" data-copied="Copied"></button><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">&lt;</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">script</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> setup</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">import </span><span style="--shiki-light:#999999;--shiki-dark:#666666;">{</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> useSlots</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> useAttrs</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> }</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> from &#39;vue&#39;;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">const slots = useSlots();  //slots 是一个对象，其中的每个键对应一个插槽的名称，值是一个函数，用于渲染对应的插槽内容</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">const attrs = useAttrs();  //attrs 是一个响应式对象，包含了所有未被显式声明为 props 的绑定属性。</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">&lt;/</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">script</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">&lt;</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">template</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">  &lt;</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">div</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">    &lt;</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">h2</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">&gt;</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">Child Component</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">&lt;/</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">h2</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">    &lt;!-- 渲染默认插槽 --&gt;</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">    &lt;</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">div</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> v-if</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">=</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">slots.default</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">      &lt;</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">slot</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> /&gt;</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">    &lt;/</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">div</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">  &lt;/</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">div</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">&lt;/</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">template</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">&gt;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="3"><li>支持多个<code>&lt;script&gt;</code>标签</li></ol><div class="language-javascript line-numbers-mode" data-ext="javascript" data-title="javascript"><button class="copy" title="Copy code" data-copied="Copied"></button><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">&lt;</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">script</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">// 普通逻辑或导出内容</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">export const globalVar = &quot;Hello!&quot;;</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">&lt;/</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">script</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">&lt;</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">script</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> setup</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">import </span><span style="--shiki-light:#999999;--shiki-dark:#666666;">{</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> ref</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> }</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> from &#39;vue&#39;;</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">const count = ref(0);</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">&lt;/</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">script</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">&gt;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><h2 id="更快的性能" tabindex="-1"><a class="header-anchor" href="#更快的性能"><span>更快的性能</span></a></h2><h3 id="虚拟-dom" tabindex="-1"><a class="header-anchor" href="#虚拟-dom"><span>虚拟 DOM</span></a></h3><ul><li><p><strong><code>虚拟 DOM 的更新过程</code></strong></p><ol><li><strong>数据变化触发重新渲染</strong> 响应式数据改变时，Vue 会触发组件的渲染函数。</li><li><strong>生成新的虚拟DOM</strong> 渲染函数被调用后，生成新的虚拟 DOM。</li><li><strong>diff 算法对比</strong> Vue 会将新旧虚拟 DOM 树进行比较，找出差异（diff）。</li><li><strong>真实 DOM 更新</strong> Vue 将 diff 的结果应用到真实 DOM 中，仅更新必要的部分。</li></ol></li><li><p><strong><code>虚拟 DOM 的优点</code></strong></p><ol><li><strong>性能更好</strong></li><li><strong>跨平台支持</strong></li><li><strong>可预测的更新</strong> 数据驱动的虚拟 DOM 更新逻辑比手动操作 DOM 更可预测</li></ol></li><li><p><strong><code>虚拟 DOM 的局限性</code></strong></p><p>构建和比较虚拟DOM，会带来额外的性能开销</p></li></ul><h3 id="编译时标记静态节点以减少更新开销" tabindex="-1"><a class="header-anchor" href="#编译时标记静态节点以减少更新开销"><span>编译时标记静态节点以减少更新开销</span></a></h3><p>静态节点只在首次渲染时创建，不会在后续更新中重新生成。</p><h2 id="更灵活的组件" tabindex="-1"><a class="header-anchor" href="#更灵活的组件"><span>更灵活的组件</span></a></h2><h3 id="自定义渲染器-custom-renderer" tabindex="-1"><a class="header-anchor" href="#自定义渲染器-custom-renderer"><span>自定义渲染器（Custom Renderer）</span></a></h3><p>Vue 3 提供了自定义渲染器功能，使开发者可以将 Vue 的响应式和组件系统应用于非浏览器环境，例如：</p><ol><li>服务端渲染 (SSR)</li><li>原生应用开发（如 Weex、UniApp、Electron）</li><li>渲染到 Canvas、WebGL、终端或其他自定义环境。</li></ol><p>自定义渲染器是 Vue 3 的一种扩展机制，它允许开发者定义自定义的 DOM 操作实现，从而将 Vue 的模板和组件渲染到任意环境中。</p><p>Vue 的核心渲染器封装了针对浏览器的 DOM 操作，而自定义渲染器则提供了一套通用接口，可以替换这些默认的操作逻辑。</p><ol><li><strong><code>createRenderer</code></strong></li></ol><p>createRenderer 是创建自定义渲染器的核心函数。它接收一个 renderer options 对象作为渲染器选项，定义在目标平台中如何操作节点。</p><div class="language-javascript line-numbers-mode" data-ext="javascript" data-title="javascript"><button class="copy" title="Copy code" data-copied="Copied"></button><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">import</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> {</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> createRenderer</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> }</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;"> from</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;"> &#39;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">@vue/runtime-core</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&#39;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">const</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> rendererOptions</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">  //实现渲染器选项</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">};</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">// 创建自定义渲染器</span></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">const</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> {</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> createApp</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> }</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> createRenderer</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">rendererOptions</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">// 创建应用程序</span></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">const</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> App</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">  render</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">()</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">    return</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#998418;--shiki-dark:#B8A965;">      type</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">:</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;"> &#39;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">rect</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&#39;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span></span>
<span class="line"><span style="--shiki-light:#998418;--shiki-dark:#B8A965;">      props</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">:</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> {</span><span style="--shiki-light:#998418;--shiki-dark:#B8A965;"> x</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">:</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 10</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#998418;--shiki-dark:#B8A965;"> y</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">:</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 20</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#998418;--shiki-dark:#B8A965;"> width</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">:</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 100</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#998418;--shiki-dark:#B8A965;"> height</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">:</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 50</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#998418;--shiki-dark:#B8A965;"> fill</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">:</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;"> &#39;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">red</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&#39;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> },</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">    };</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">  },</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">};</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">const</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> canvasRoot</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> {</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> </span></span>
<span class="line"><span style="--shiki-light:#998418;--shiki-dark:#B8A965;">  type</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">:</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;"> &#39;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">canvas</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&#39;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">  //目标终端类型</span></span>
<span class="line"><span style="--shiki-light:#998418;--shiki-dark:#B8A965;">  children</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">:</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> []</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> </span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">};</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">createApp</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">App</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">).</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">mount</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">canvasRoot</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">);</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="2"><li><strong><code>渲染器选项</code></strong></li></ol><p>rendererOptions 是自定义渲染器的关键部分，需用户根据目标环境定义了对应的操作方法。比如</p><ul><li>createElement： 如何创建元素</li><li>insert: 如何插入元素</li><li>patchProp: 如何更新设置属性</li><li>remove: 如何移除元素</li><li>setElementText: 如何设置文本内容</li></ul><ol start="3"><li><strong><code>渲染逻辑</code></strong></li></ol><ul><li>Vue 的响应式系统会驱动组件更新。</li><li>在模板编译时，Vue 会生成对应的渲染函数，返回虚拟 DOM。</li><li>自定义渲染器会使用 rendererOptions 将虚拟 DOM 映射到目标平台。</li></ul><h3 id="fragment-允许组件返回多个根节点。" tabindex="-1"><a class="header-anchor" href="#fragment-允许组件返回多个根节点。"><span>Fragment 允许组件返回多个根节点。</span></a></h3><h3 id="teleport-将子组件渲染到-dom-的其他位置。" tabindex="-1"><a class="header-anchor" href="#teleport-将子组件渲染到-dom-的其他位置。"><span>Teleport 将子组件渲染到 DOM 的其他位置。</span></a></h3><p>Teleport 通过指定目标 DOM 节点（to 属性），将其子组件内容移动到目标位置。</p><div class="language-javascript line-numbers-mode" data-ext="javascript" data-title="javascript"><button class="copy" title="Copy code" data-copied="Copied"></button><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">&lt;</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">template</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">  &lt;</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">div</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">    &lt;</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">button</span><span style="--shiki-light:#B31D28;--shiki-light-font-style:italic;--shiki-dark:#FDAEB7;--shiki-dark-font-style:italic;"> @click=&quot;showModal</span><span style="--shiki-light:#B31D28;--shiki-light-font-style:italic;--shiki-dark:#FDAEB7;--shiki-dark-font-style:italic;"> =</span><span style="--shiki-light:#B31D28;--shiki-light-font-style:italic;--shiki-dark:#FDAEB7;--shiki-dark-font-style:italic;"> true&quot;&gt;Open</span><span style="--shiki-light:#B31D28;--shiki-light-font-style:italic;--shiki-dark:#FDAEB7;--shiki-dark-font-style:italic;"> Modal&lt;/button&gt;</span></span>
<span class="line"><span style="--shiki-light:#B31D28;--shiki-light-font-style:italic;--shiki-dark:#FDAEB7;--shiki-dark-font-style:italic;">    &lt;Teleport</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> to</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">=</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">body</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">      &lt;</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">div</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> v-if</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">=</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">showModal</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> class</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">=</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">modal</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">        &lt;</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">p</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">&gt;</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">This is a modal rendered in the body element.</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">&lt;/</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">p</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">        &lt;</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">button</span><span style="--shiki-light:#B31D28;--shiki-light-font-style:italic;--shiki-dark:#FDAEB7;--shiki-dark-font-style:italic;"> @click=&quot;showModal</span><span style="--shiki-light:#B31D28;--shiki-light-font-style:italic;--shiki-dark:#FDAEB7;--shiki-dark-font-style:italic;"> =</span><span style="--shiki-light:#B31D28;--shiki-light-font-style:italic;--shiki-dark:#FDAEB7;--shiki-dark-font-style:italic;"> false&quot;&gt;Close&lt;/button&gt;</span></span>
<span class="line"><span style="--shiki-light:#B31D28;--shiki-light-font-style:italic;--shiki-dark:#FDAEB7;--shiki-dark-font-style:italic;">      &lt;/div&gt;</span></span>
<span class="line"><span style="--shiki-light:#B31D28;--shiki-light-font-style:italic;--shiki-dark:#FDAEB7;--shiki-dark-font-style:italic;">    &lt;/Teleport&gt;</span></span>
<span class="line"><span style="--shiki-light:#B31D28;--shiki-light-font-style:italic;--shiki-dark:#FDAEB7;--shiki-dark-font-style:italic;">  &lt;/div&gt;</span></span>
<span class="line"><span style="--shiki-light:#B31D28;--shiki-light-font-style:italic;--shiki-dark:#FDAEB7;--shiki-dark-font-style:italic;">&lt;/template&gt;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>to 的值可以动态改变，以便将内容移动到不同的目标。</p><h3 id="Suspense" tabindex="-1"><a class="header-anchor" href="#Suspense"><span>Suspense 处理异步组件加载</span></a></h3><p>Suspense 是 Vue 3 提供的一个新组件，用于优雅地处理异步组件加载或异步操作。它允许在异步任务完成前显示一个占位内容，并在任务完成后切换到真实内容。</p><div class="language-javascript line-numbers-mode" data-ext="javascript" data-title="javascript"><button class="copy" title="Copy code" data-copied="Copied"></button><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">&lt;</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">template</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">  &lt;</span><span style="--shiki-light:#998418;--shiki-dark:#B8A965;">Suspense</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">    &lt;!-- 异步内容 --&gt;</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">    &lt;</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">template</span><span style="--shiki-light:#B31D28;--shiki-light-font-style:italic;--shiki-dark:#FDAEB7;--shiki-dark-font-style:italic;"> #default&gt;</span></span>
<span class="line"><span style="--shiki-light:#B31D28;--shiki-light-font-style:italic;--shiki-dark:#FDAEB7;--shiki-dark-font-style:italic;">      &lt;AsyncComponent</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> /&gt;</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">    &lt;/</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">template</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">    &lt;!-- 占位内容 --&gt;</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">    &lt;</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">template</span><span style="--shiki-light:#B31D28;--shiki-light-font-style:italic;--shiki-dark:#FDAEB7;--shiki-dark-font-style:italic;"> #fallback&gt;</span></span>
<span class="line"><span style="--shiki-light:#B31D28;--shiki-light-font-style:italic;--shiki-dark:#FDAEB7;--shiki-dark-font-style:italic;">      &lt;p&gt;Loading...&lt;/p&gt;</span></span>
<span class="line"><span style="--shiki-light:#B31D28;--shiki-light-font-style:italic;--shiki-dark:#FDAEB7;--shiki-dark-font-style:italic;">    &lt;/template&gt;</span></span>
<span class="line"><span style="--shiki-light:#B31D28;--shiki-light-font-style:italic;--shiki-dark:#FDAEB7;--shiki-dark-font-style:italic;">  &lt;/Suspense&gt;</span></span>
<span class="line"><span style="--shiki-light:#B31D28;--shiki-light-font-style:italic;--shiki-dark:#FDAEB7;--shiki-dark-font-style:italic;">&lt;/template&gt;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>核心概念</strong></p><ol><li><p>占位内容</p><p>使用 #fallback 插槽提供异步加载期间的占位内容。常用于加载指示器（如“加载中”或进度条）。</p></li><li><p>默认内容</p><p>使用 #default 插槽定义实际要渲染的异步内容。异步内容可以是异步组件或包含异步逻辑的普通组件。</p></li><li><p>异步逻辑支持</p><p>Suspense 的核心能力来自于其对异步组件或异步 setup 函数的支持。</p></li></ol><p><strong>Suspense 的生命周期</strong></p><ol><li>onPending：当异步内容开始加载时触发。</li><li>onResolve：当所有异步任务完成时触发</li></ol><div class="hint-container note"><p class="hint-container-title">Note</p><ul><li>Vue组件<mark>setup模式</mark>下，可以直接编写async/await异步逻辑。如果使用了<mark>await操作</mark>，组件setup实际上会返回一个Promise。</li><li>Suspense组件会搜集所有返回Promise的子组件并维护相应队列。通过监听这些Promise状态，可以判断子组件是否加载完成。</li><li>组件setup的执行，实在onMounted事件之前。</li></ul></div><h2 id="其他改进" tabindex="-1"><a class="header-anchor" href="#其他改进"><span>其他改进</span></a></h2><h3 id="tree-shaking" tabindex="-1"><a class="header-anchor" href="#tree-shaking"><span>Tree-shaking</span></a></h3><p>Tree-shaking 是现代 JavaScript 打包工具（如 Webpack、Rollup、Vite 等）使用的一种优化技术，用于移除未使用的代码，从而减小打包后的文件体积，提升应用性能。</p><p><strong>基本原理</strong></p><p>Tree-shaking 的核心基于以下两点：</p><ul><li>ES Module 静态结构</li></ul><p>import 和 export 是 ES Module 的关键特性，具有静态分析能力。打包工具在构建时可以确定哪些模块被使用了，哪些模块没有被使用</p><p><strong>启用</strong></p><ol><li>使用 ES Module规范编写代码</li><li>配置打包工具</li></ol><ul><li>Webpack: 确保 mode 设置为 production，Tree-shaking 会自动启用。</li><li>Rollup: 天然支持 Tree-shaking，默认会移除未使用的代码。</li><li>Vite: 基于 Rollup，默认支持 Tree-shaking，无需额外配置。</li></ul><p><strong>注意事项和限制</strong></p>`,46)),i("ol",null,[s[5]||(s[5]=i("li",null,[i("p",null,"副作用声明"),i("p",null,[a("如果模块具有副作用（如修改全局变量），需要在 package.json 中使用 "),i("mark",null,"sideEffects"),a(" 配置告知打包工具哪些文件不能移除。")])],-1)),s[6]||(s[6]=i("li",null,[i("p",null,"动态导入"),i("p",null,"Tree-shaking 对动态导入支持有限。")],-1)),i("li",null,[s[4]||(s[4]=i("p",null,"第三方库",-1)),i("p",null,[s[3]||(s[3]=a("一些老旧的第三方库未使用 ES Module 或未正确声明 sideEffects，可能阻碍 Tree-shaking。Vite中如何支持非ESM模块，请")),t(n,{to:"/learn/vite/L6uVy/#none-esm"},{default:e(()=>s[2]||(s[2]=[a("参考")])),_:1})])]),s[7]||(s[7]=i("li",null,[i("p",null,"作用范围"),i("p",null,[a("Tree-shaking 不会对整个项目的所有代码进行全局优化，而是"),i("mark",null,"基于模块范围"),a("进行分析。")])],-1))]),s[12]||(s[12]=l('<h3 id="emits-选项用于定义事件" tabindex="-1"><a class="header-anchor" href="#emits-选项用于定义事件"><span>emits 选项用于定义事件</span></a></h3><p>即setup模式里的defineEmits方法，用来定义事件。实际上，通过传参回调也能起到定义事件的作用，二者的差异在于：</p><ul><li><strong>语义明确性</strong>：defineEmits 在定义事件时，语义上更明确，表明该组件会触发某些事件。这让组件的行为更加清晰，且与 Vue 的事件系统高度集成。</li><li><strong>灵活性</strong>：通过传参回调的方式可以更加灵活，因为父组件和子组件的通信不依赖于 Vue 的事件机制，父组件直接控制回调函数的传递和执行顺序。然而，这样的方式可能会失去一些事件的可追溯性和结构化，尤其是在较为复杂的组件树中。</li><li><strong>用途</strong>：defineEmits 适合在组件之间通过标准的事件通信（例如：点击、提交、更新数据等）。而通过回调的方式更多用于父组件直接控制子组件的行为（例如：父组件控制子组件某些方法的执行时机）。</li></ul><h3 id="全新的-v-model-语法-支持多个绑定。" tabindex="-1"><a class="header-anchor" href="#全新的-v-model-语法-支持多个绑定。"><span>全新的 v-model 语法，支持多个绑定。</span></a></h3>',4)),i("p",null,[s[9]||(s[9]=a("详情")),t(n,{to:"/learn/vue/U5yAadLd1PMOZzr3Dyq2/#mul-bind"},{default:e(()=>s[8]||(s[8]=[a("参考")])),_:1})]),s[13]||(s[13]=i("h3",{id:"typescript-的更好支持。",tabindex:"-1"},[i("a",{class:"header-anchor",href:"#typescript-的更好支持。"},[i("span",null,"Typescript 的更好支持。")])],-1))])}const y=p(r,[["render",c],["__file","index.html.vue"]]),u=JSON.parse('{"path":"/learn/vue/SjtYkCII3u0BI/","title":"Vue3新特性","lang":"en-US","frontmatter":{"title":"Vue3新特性","createTime":"2025/01/18 07:04:32","permalink":"/learn/vue/SjtYkCII3u0BI/","author":"Jack","tags":["Vue3","回顾"],"description":"description","head":[["meta",{"property":"og:url","content":"https://duduainy.top/learn/vue/SjtYkCII3u0BI/"}],["meta",{"property":"og:site_name","content":"Seasoned Jack"}],["meta",{"property":"og:title","content":"Vue3新特性"}],["meta",{"property":"og:description","content":"description"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"en-US"}],["meta",{"property":"og:updated_time","content":"2025-02-16T01:07:43.000Z"}],["meta",{"property":"article:author","content":"Jack"}],["meta",{"property":"article:tag","content":"Vue3"}],["meta",{"property":"article:tag","content":"回顾"}],["meta",{"property":"article:modified_time","content":"2025-02-16T01:07:43.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Vue3新特性\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2025-02-16T01:07:43.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Jack\\"}]}"]]},"headers":[],"readingTime":{"minutes":10.35,"words":3105},"git":{"updatedTime":1739668063000,"contributors":[{"name":"meishenlieshou","username":"meishenlieshou","email":"meishenlieshou@gmail.com","commits":1,"avatar":"https://avatars.githubusercontent.com/meishenlieshou?v=4","url":"https://github.com/meishenlieshou"}],"changelog":[{"hash":"beb5cca6f274fcc9944a0670244b5fcbd3e75682","date":1739668063000,"email":"meishenlieshou@gmail.com","author":"meishenlieshou","message":"Update 1.Zustand.md","commitUrl":"https://github.com/meishenlieshou/note/commit/beb5cca6f274fcc9944a0670244b5fcbd3e75682"}]},"filePathRelative":"notes/learn/vue/1.Vue3新特性.md","bulletin":false}');export{y as comp,u as data};
