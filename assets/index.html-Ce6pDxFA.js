import{_ as s,c as a,a as e,o as n}from"./app-D232rJqM.js";const t={};function l(h,i){return n(),a("div",null,i[0]||(i[0]=[e(`<h2 id="vue-的虚拟-dom-是如何工作的-详细描述其-diff-算法的核心逻辑。" tabindex="-1"><a class="header-anchor" href="#vue-的虚拟-dom-是如何工作的-详细描述其-diff-算法的核心逻辑。"><span>Vue 的虚拟 DOM 是如何工作的？详细描述其 Diff 算法的核心逻辑。</span></a></h2><p>轻量级的 JavaScript 对象。</p><ol><li>通过 render 函数将模板编译为虚拟 DOM。</li><li>当数据发生变化时，Vue 会重新执行 render 函数生成新的虚拟 DOM</li><li>比较新旧虚拟 DOM 的差异</li><li>根据 Diff 结果对真实 DOM 进行最小化更新</li></ol><p>算法的核心逻辑:</p><ol><li>同层比较：只比较同一层的节点，不跨层比较</li><li>双端对比：从头尾两端同时进行对比，尽量减少遍历次数</li><li>键值优化：通过 key 快速定位节点，提升对比效率</li><li>最小化 DOM 操作：只更新需要变动的部分，避免不必要的 DOM 重绘</li></ol><h2 id="在-vue-中-template-是如何被编译成渲染函数的-这个过程的关键步骤有哪些" tabindex="-1"><a class="header-anchor" href="#在-vue-中-template-是如何被编译成渲染函数的-这个过程的关键步骤有哪些"><span>在 Vue 中，template 是如何被编译成渲染函数的？这个过程的关键步骤有哪些？</span></a></h2><p>模板编译经历三个阶段</p><ol><li>template 字符串解析为<mark>抽象语法树（AST）</mark></li><li>标记模板中的<mark>静态节点</mark>，减少渲染时的性能开销</li><li>优化后的 AST 转换为 JavaScript <mark>渲染函数</mark></li></ol><p><mark>h 函数</mark>：创建虚拟 DOM 节点的工具函数</p><div class="language-javascript line-numbers-mode" data-ext="javascript" data-title="javascript"><button class="copy" title="Copy code" data-copied="Copied"></button><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">/**</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"> * type: HTML标签名、或者Vue组件</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"> * props: HTML节点对应的属性</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"> * children: 子节点</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"> */</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">h</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">type</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> props</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">?</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> children</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">?</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">)</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>h函数，在render方法里调用，render返回h函数返回值。</li><li>和render函数里返回JSX等效。</li></ul><h2 id="vue-的-keep-alive-是如何实现组件缓存的-有哪些生命周期钩子与其相关" tabindex="-1"><a class="header-anchor" href="#vue-的-keep-alive-是如何实现组件缓存的-有哪些生命周期钩子与其相关"><span>Vue 的 keep-alive 是如何实现组件缓存的？有哪些生命周期钩子与其相关？</span></a></h2><ol><li>keep-alive 通过一个内部的 cache 对象来存储组件实例。通常以每个组件的key作为键值存储。</li><li>组件卸载时，并未真正卸载。DOM和状态依然会保留在cache中，供下次直接使用。</li></ol><p>相关的生命周期钩子有两个</p><ul><li><strong><code>activated</code></strong> 当组件被缓存但不再显示时触发</li><li><strong><code>activated</code></strong> 当组件从缓存中被激活时触发</li></ul><p>如何彻底卸载?</p><p>通过keep-alive会和component配置使用，需要真正卸载时，将组件的使用移出keep-alive包裹即可。</p><div class="language-javascript line-numbers-mode" data-ext="javascript" data-title="javascript"><button class="copy" title="Copy code" data-copied="Copied"></button><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">&lt;</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">template</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">  &lt;</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">div</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">    &lt;</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">button</span><span style="--shiki-light:#B31D28;--shiki-light-font-style:italic;--shiki-dark:#FDAEB7;--shiki-dark-font-style:italic;"> @click=&quot;current</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;"> &#39;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">A</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&#39;&quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">&gt;Show Component A&lt;/button&gt;</span></span>
<span class="line"><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">    &lt;button @click=</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">current</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;"> &#39;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">B</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&#39;&quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">&gt;Show Component B&lt;/button&gt;</span></span>
<span class="line"><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">    &lt;button @click=</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#B31D28;--shiki-light-font-style:italic;--shiki-dark:#FDAEB7;--shiki-dark-font-style:italic;">clearCache&quot;&gt;Clear</span><span style="--shiki-light:#B31D28;--shiki-light-font-style:italic;--shiki-dark:#FDAEB7;--shiki-dark-font-style:italic;"> Cache&lt;/button&gt;</span></span>
<span class="line"><span style="--shiki-light:#B31D28;--shiki-light-font-style:italic;--shiki-dark:#FDAEB7;--shiki-dark-font-style:italic;">    &lt;keep-alive</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> v-if</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">=</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">useCache</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">      &lt;</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">component</span><span style="--shiki-light:#B31D28;--shiki-light-font-style:italic;--shiki-dark:#FDAEB7;--shiki-dark-font-style:italic;"> :is=&quot;current&quot;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> /&gt;</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">    &lt;/</span><span style="--shiki-light:#998418;--shiki-dark:#B8A965;">keep-alive</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">    &lt;</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">component</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> v-else</span><span style="--shiki-light:#B31D28;--shiki-light-font-style:italic;--shiki-dark:#FDAEB7;--shiki-dark-font-style:italic;"> :is=&quot;current&quot;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> /&gt;</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">  &lt;/</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">div</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">&lt;/</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">template</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">&lt;</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">script</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> setup</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">import </span><span style="--shiki-light:#999999;--shiki-dark:#666666;">{</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> ref</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> nextTick</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> }</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> from &#39;vue&#39;;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">const current = ref(&#39;A&#39;);</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">const useCache = ref(true);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">const clearCache = async () =&gt; </span><span style="--shiki-light:#999999;--shiki-dark:#666666;">{</span></span>
<span class="line"><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">  useCache</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">value</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;"> false</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">; </span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">// 停用缓存</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">  await</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> nextTick</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">()</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">;       </span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">// 等待 DOM 更新</span></span>
<span class="line"><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">  useCache</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">value</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;"> true</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">;  </span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">// 恢复缓存功能</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">}</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">;</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">&lt;/</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">script</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">&gt;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="component组件" tabindex="-1"><a class="header-anchor" href="#component组件"><span>component组件</span></a></h2><p>通过is属性，动态切换组件。常见的应用场景</p><ul><li>动态内容切换</li><li><code>&lt;router-view&gt;</code> 实际上是基于 <code>&lt;component&gt;</code> 实现的动态路由组件渲染</li><li>使用异步组件配合 <code>&lt;component&gt;</code>，实现按需加载的性能优化</li></ul><h2 id="如何在-vue-项目中处理大列表渲染的性能问题-有哪些技术方案可以实现优化" tabindex="-1"><a class="header-anchor" href="#如何在-vue-项目中处理大列表渲染的性能问题-有哪些技术方案可以实现优化"><span>如何在 Vue 项目中处理大列表渲染的性能问题？有哪些技术方案可以实现优化</span></a></h2><ul><li><strong>虚拟滚动</strong> 滚动加载渲染</li><li><strong>分片渲染</strong> 分片自动加载渲染</li><li><strong>DOM 优化</strong></li><li><strong>Web Worker</strong></li></ul><h2 id="如何设计一个基于-vue-的全局状态管理方案-而不依赖-vuex-或-pinia" tabindex="-1"><a class="header-anchor" href="#如何设计一个基于-vue-的全局状态管理方案-而不依赖-vuex-或-pinia"><span>如何设计一个基于 Vue 的全局状态管理方案，而不依赖 Vuex 或 Pinia</span></a></h2><ol><li>基于reactive创建全局对象。各个组件里引用全局对象里的属性（不要解构），或者通过全局对象里的方法，都会被vue跟踪而具备响应性</li><li>创建reactive对象，在应用顶层provide，组件里通过inject注入</li></ol>`,25)]))}const k=s(t,[["render",l],["__file","index.html.vue"]]),r=JSON.parse('{"path":"/learn/vue/b3JOg78/","title":"vue常见问题","lang":"en-US","frontmatter":{"title":"vue常见问题","createTime":"2025/01/21 13:43:03","permalink":"/learn/vue/b3JOg78/","author":"Jack","tags":["Vue","问题"],"description":"description","head":[["meta",{"property":"og:url","content":"https://duduainy.top/learn/vue/b3JOg78/"}],["meta",{"property":"og:site_name","content":"Seasoned Jack"}],["meta",{"property":"og:title","content":"vue常见问题"}],["meta",{"property":"og:description","content":"description"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"en-US"}],["meta",{"property":"og:updated_time","content":"2025-02-16T01:18:17.000Z"}],["meta",{"property":"article:author","content":"Jack"}],["meta",{"property":"article:tag","content":"Vue"}],["meta",{"property":"article:tag","content":"问题"}],["meta",{"property":"article:modified_time","content":"2025-02-16T01:18:17.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"vue常见问题\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2025-02-16T01:18:17.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Jack\\"}]}"]]},"headers":[],"readingTime":{"minutes":2.87,"words":860},"git":{"updatedTime":1739668697000,"contributors":[{"name":"meishenlieshou","username":"meishenlieshou","email":"meishenlieshou@gmail.com","commits":1,"avatar":"https://avatars.githubusercontent.com/meishenlieshou?v=4","url":"https://github.com/meishenlieshou"}],"changelog":[{"hash":"6167b05db8807d0420615f34cb059fcc1b4cf3a8","date":1739668697000,"email":"meishenlieshou@gmail.com","author":"meishenlieshou","message":"Update DSA Microservices Architecture.md","commitUrl":"https://github.com/meishenlieshou/note/commit/6167b05db8807d0420615f34cb059fcc1b4cf3a8"}]},"filePathRelative":"notes/learn/vue/vue常见问题.md","bulletin":false}');export{k as comp,r as data};
