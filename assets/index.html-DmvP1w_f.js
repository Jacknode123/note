import{_ as i,c as a,a as e,o as n}from"./app-D232rJqM.js";const t={};function l(h,s){return n(),a("div",null,s[0]||(s[0]=[e(`<h2 id="响应式原理" tabindex="-1"><a class="header-anchor" href="#响应式原理"><span>响应式原理</span></a></h2><p>Vue 3 的响应式原理是基于 Proxy 和 getter/setter 的机制，它通过拦截对象的访问与修改操作来实现数据的响应式更新。</p><div class="hint-container important"><p class="hint-container-title">Important</p><p><strong>主要原理概述</strong></p><ul><li>Proxy：Vue 3 使用了 JavaScript 的 Proxy 对象来实现响应式数据的拦截。通过 Proxy，我们可以监听对象的读写操作，以及对象的其他行为（如删除属性等）。</li><li>依赖收集：当组件渲染时，Vue 会在访问响应式对象的属性时记录下这些属性的依赖（即哪些地方依赖这些数据）。当数据发生变化时，Vue 会触发依赖的更新，从而实现视图的自动更新。</li><li>懒代理：Vue 3 的响应式系统采用懒代理的策略，只有在某个属性被访问时，才会触发代理的操作。这样可以提高性能，避免不必要的代理操作。</li></ul></div><p><strong>Proxy 的工作机制</strong></p><p>Proxy 是一种 ES6 新增的对象机制，它允许我们定义自定义的行为来拦截和修改对对象的操作。Proxy 的构造函数接受两个参数：目标对象和处理器对象（handler）。</p><p><strong>与Proxy配合使用的Reflect</strong></p><p>简而言之，Proxy用于拦截对象的操作行为，在Proxy函数的第二个参数里定义如何拦截。当需要执行操作的默认行为时，就需要用到Reflect反射。</p><p>反射提供一系列静态方法，这些方法和原生操作方法一一对应。需要在拦截操作里执行原生操作时，调用相应的反射静态方法并返回即可。</p><p><strong>为什么 Vue 3 使用 Proxy 而不是 Object.defineProperty</strong></p><p>Vue 2 使用的是 Object.defineProperty 来实现响应式，然而这个方法有一些缺点：</p><ul><li>不能对新增/删除的属性进行监听：Object.defineProperty 只能监听对象已有的属性，而无法监听新增的属性。</li><li>性能问题：Vue 2 需要为每个属性都定义 getter 和 setter，这会导致性能问题。</li></ul><p>Vue 3 通过使用 Proxy 解决了这些问题：</p><ul><li>支持新增/删除属性：Proxy 可以拦截任何操作，包括属性的添加和删除。</li><li>性能优化：Proxy 的实现更加灵活且高效，性能优于 Object.defineProperty。</li></ul><h2 id="ref-和-reactive" tabindex="-1"><a class="header-anchor" href="#ref-和-reactive"><span>ref 和 reactive</span></a></h2><h3 id="ref-用于简单值-reactive-用于复杂对象。" tabindex="-1"><a class="header-anchor" href="#ref-用于简单值-reactive-用于复杂对象。"><span>ref 用于简单值，reactive 用于复杂对象。</span></a></h3><h3 id="torefs-和-toref-的作用与场景。" tabindex="-1"><a class="header-anchor" href="#torefs-和-toref-的作用与场景。"><span>toRefs 和 toRef 的作用与场景。</span></a></h3><div class="hint-container note"><p class="hint-container-title">Note</p><p>toRefs 是一个用于将一个响应式对象的属性转换为响应式引用的函数。它可以把对象的每个属性变成独立的 ref，使得在解构对象时依然保持响应式。</p><div class="language-javascript line-numbers-mode" data-ext="javascript" data-title="javascript"><button class="copy" title="Copy code" data-copied="Copied"></button><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">import</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> {</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> reactive</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> toRefs</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> }</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;"> from</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;"> &#39;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">vue</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&#39;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> const</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> state</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> reactive</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">({</span></span>
<span class="line"><span style="--shiki-light:#998418;--shiki-dark:#B8A965;">   count</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">:</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 0</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span></span>
<span class="line"><span style="--shiki-light:#998418;--shiki-dark:#B8A965;">   name</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">:</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;"> &#39;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">Alice</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&#39;</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;"> });</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"> // 使用 toRefs 将响应式对象的属性转换为响应式引用</span></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> const</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> {</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> count</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> name</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> }</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> toRefs</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">state</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"> // 可以像使用 ref 一样访问 count 和 name</span></span>
<span class="line"><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> count</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">value</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">++</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">  // 更新 count</span></span>
<span class="line"><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> console</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">log</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">count</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">value</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">);</span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">  // 输出：1</span></span>
<span class="line"><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> console</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">log</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">name</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">value</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">);</span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">   // 输出：Alice</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>toRefs 将 state 对象的每个属性（count 和 name）都转换为一个独立的 ref。</li><li>这样，你在解构 state 对象时，count 和 name 仍然保持响应式。</li></ul></div><p><strong>为什么使用 toRefs？</strong></p><p>当你传递响应式对象到组件或外部函数时，解构对象会破坏对象的响应性。使用 toRefs 可以保持每个属性的响应性。</p><div class="hint-container note"><p class="hint-container-title">Note</p><p>toRef 是一个用于将响应式对象的单个属性转换为响应式引用的函数。它创建一个新的 ref，这个 ref 引用的是响应式对象的指定属性，并且保持响应式。</p><div class="language-javascript line-numbers-mode" data-ext="javascript" data-title="javascript"><button class="copy" title="Copy code" data-copied="Copied"></button><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">import</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> {</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> reactive</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> toRef</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> }</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;"> from</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;"> &#39;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">vue</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&#39;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> const</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> state</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> reactive</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">({</span></span>
<span class="line"><span style="--shiki-light:#998418;--shiki-dark:#B8A965;">   count</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">:</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 0</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span></span>
<span class="line"><span style="--shiki-light:#998418;--shiki-dark:#B8A965;">   name</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">:</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;"> &#39;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">Alice</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&#39;</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;"> });</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"> // 使用 toRef 将 state 中的某个属性转换为响应式引用</span></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> const</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> countRef</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> toRef</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">state</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;"> &#39;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">count</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&#39;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"> // 可以像使用 ref 一样访问 countRef</span></span>
<span class="line"><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> countRef</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">value</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">++</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">  // 更新 count</span></span>
<span class="line"><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> console</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">log</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">countRef</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">value</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">);</span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">  // 输出：1</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>toRef(state, &#39;count&#39;) 将 state 中的 count 属性转换为一个独立的响应式 ref，保持了它的响应性。</li></ul></div><p><strong>为什么使用 toRef？</strong></p><p>toRef 适用于当你只需要访问或修改对象中的某个属性，而不需要转换整个对象时。</p><h3 id="readonly-与-shallowreactive-的作用。" tabindex="-1"><a class="header-anchor" href="#readonly-与-shallowreactive-的作用。"><span>readonly 与 shallowReactive 的作用。</span></a></h3><ol><li><p>readonly 的作用 readonly 用于创建一个只读的响应式对象，它使得对象的所有属性都变为只读，无法修改。这对于在不希望某些数据被修改时非常有用，比如传递到子组件时，确保数据不被意外改变。</p></li><li><p>shallowReactive 的作用 shallowReactive 用于创建一个浅响应式对象，它与 reactive 类似，但只会使对象的顶层属性变为响应式，而不会递归地将对象的嵌套属性变成响应式。这意味着，如果对象包含嵌套的子对象，嵌套对象本身不会变为响应式，只有对象的直接属性会变成响应式。</p></li></ol><h2 id="watch&amp;watchEffect" tabindex="-1"><a class="header-anchor" href="#watch&amp;watchEffect"><span>watchEffect 与普通 watch 的区别</span></a></h2><p>watchEffect 和 watch 都是用于响应式数据的副作用管理，它们都能够监听和响应响应式数据的变化。</p><ol><li><strong>watchEffect</strong></li></ol><p>watchEffect 是 Vue 3 提供的一个 API，它会 <strong><code>立即运行</code></strong> ，并且自动追踪响应式数据的变化。它的主要特点是能够 <strong><code>自动地依赖收集</code></strong> 并执行副作用。也就是说，watchEffect 不需要明确指定要监听的响应式数据，而是自动地追踪其内部的所有响应式数据。</p><ol start="2"><li><strong>watch</strong></li></ol><p>允许你手动指定需要监听的响应式数据。当指定的响应式数据发生变化时，watch 会执行回调函数。与 watchEffect 不同，watch 需要显式指定监听的数据，并且你可以 <strong><code>通过回调函数获取到新值和旧值</code></strong>。</p>`,30)]))}const k=i(t,[["render",l],["__file","index.html.vue"]]),r=JSON.parse('{"path":"/learn/vue/27zpUq4W6kPrGTR5dz/","title":"响应式系统","lang":"en-US","frontmatter":{"title":"响应式系统","createTime":"2025/01/18 07:06:25","permalink":"/learn/vue/27zpUq4W6kPrGTR5dz/","author":"Jack","tags":["Vue3","回顾"],"description":"description","head":[["meta",{"property":"og:url","content":"https://duduainy.top/learn/vue/27zpUq4W6kPrGTR5dz/"}],["meta",{"property":"og:site_name","content":"Seasoned Jack"}],["meta",{"property":"og:title","content":"响应式系统"}],["meta",{"property":"og:description","content":"description"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"en-US"}],["meta",{"property":"og:updated_time","content":"2025-02-16T01:18:17.000Z"}],["meta",{"property":"article:author","content":"Jack"}],["meta",{"property":"article:tag","content":"Vue3"}],["meta",{"property":"article:tag","content":"回顾"}],["meta",{"property":"article:modified_time","content":"2025-02-16T01:18:17.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"响应式系统\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2025-02-16T01:18:17.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Jack\\"}]}"]]},"headers":[],"readingTime":{"minutes":4.83,"words":1448},"git":{"updatedTime":1739668697000,"contributors":[{"name":"meishenlieshou","username":"meishenlieshou","email":"meishenlieshou@gmail.com","commits":1,"avatar":"https://avatars.githubusercontent.com/meishenlieshou?v=4","url":"https://github.com/meishenlieshou"}],"changelog":[{"hash":"6167b05db8807d0420615f34cb059fcc1b4cf3a8","date":1739668697000,"email":"meishenlieshou@gmail.com","author":"meishenlieshou","message":"Update DSA Microservices Architecture.md","commitUrl":"https://github.com/meishenlieshou/note/commit/6167b05db8807d0420615f34cb059fcc1b4cf3a8"}]},"filePathRelative":"notes/learn/vue/2.响应式系统.md","bulletin":false}');export{k as comp,r as data};
